#!/usr/bin/env nextflow
/*
========================================================================================
                         lifebit-ai/dragen
========================================================================================
 lifebit-ai/dragen Illumina's Dragen pipeline including indexing, mapping & variant calling
 #### Homepage / Documentation
 https://github.com/lifebit-ai/dragen
----------------------------------------------------------------------------------------
*/

params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
if (params.fasta) {
  Channel
      .fromPath(params.fasta)
      .ifEmpty { exit 1, "FASTA annotation file not found: ${params.fasta}" }
      .into { fasta_index; fasta_dragen }
}
params.ref = params.genome ? params.genomes[ params.genome ].ref ?: false : false
if (params.ref) {
  Channel
      .fromPath(params.ref)
      .ifEmpty { exit 1, "Folder containing indexes for reference genome generated by Dragen not found: ${params.ref}" }
      .set { ref_dragen }
}

reads="${params.reads}/${params.reads_prefix}_{1,2}.${params.reads_extension}"
Channel
    .fromFilePairs(reads, size: 2)
    .ifEmpty { exit 1, "Cannot find any reads matching: ${reads}" }
    .merge(fasta_dragen)
    .set { reads_fasta_dragen}

/*--------------------------------------------------
  Run indexing for dragen if indexes are not supplied
---------------------------------------------------*/

if (!params.ref) {
  process index {
    tag "${fasta}"

    input:
    file(fasta) from fasta_index

    output:
    file("ref") into ref_dragen

    script:
    """
    dragen \
    --build-hash-table true \
    --output-directory ref \
    --ht-reference $fasta
    """
  }
}

dragen = reads_fasta_dragen.combine(ref_dragen)

/*--------------------------------------------------
  Run Dragen mapping & variant calling
---------------------------------------------------*/

process dragen {
  tag "${name}"
  publishDir "${params.outdir}", mode: 'copy'

  input:
  set val(name), file(fastq), file(fasta), file(ref) from dragen

  output:
  set val(name), file("${name}*"), file("streaming_log.csv") into results

  script:
  """
  dragen \
  -r $ref \
  --output-directory . \
  --output-file-prefix $name \
  -1 ${fastq[0]} \
  -2 ${fastq[1]}\
  --enable-variant-caller true \
  --vc-sample-name $name
  """
}